import{_ as r,C as n,c as p,o,j as a,a as e,az as t,G as l}from"./chunks/framework.BxqUZRRL.js";const v=JSON.parse('{"title":"Types","description":"","frontmatter":{},"headers":[],"relativePath":"API/types.md","filePath":"API/types.md","lastUpdated":null}'),d={name:"API/types.md"},h={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""};function E(_,s,m,j,T,C){const i=n("Badge");return o(),p("div",null,[s[27]||(s[27]=a("h1",{id:"types",tabindex:"-1"},[e("Types "),a("a",{class:"header-anchor",href:"#types","aria-label":'Permalink to "Types"'},"â€‹")],-1)),a("details",h,[a("summary",null,[s[0]||(s[0]=a("a",{id:"AlgebraOfGraphics.AbstractDrawable",href:"#AlgebraOfGraphics.AbstractDrawable"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.AbstractDrawable")],-1)),s[1]||(s[1]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[2]||(s[2]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractDrawable</span></span></code></pre></div><p>Abstract type encoding objects that can be drawn via <a href="/v0.9.2/API/functions#AlgebraOfGraphics.draw"><code>AlgebraOfGraphics.draw</code></a>.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",c,[a("summary",null,[s[3]||(s[3]=a("a",{id:"AlgebraOfGraphics.AbstractAlgebraic",href:"#AlgebraOfGraphics.AbstractAlgebraic"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.AbstractAlgebraic")],-1)),s[4]||(s[4]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[5]||(s[5]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AbstractAlgebraic  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDrawable</span></span></code></pre></div><p>Abstract type encoding objects that can be combined together using <code>+</code> and <code>*</code>.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",g,[a("summary",null,[s[6]||(s[6]=a("a",{id:"AlgebraOfGraphics.Layer",href:"#AlgebraOfGraphics.Layer"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.Layer")],-1)),s[7]||(s[7]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[8]||(s[8]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transformation, data, positional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, named</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Algebraic object encoding a single layer of a visualization. It is composed of a dataset, positional and named arguments, as well as a transformation to be applied to those. <code>Layer</code> objects can be multiplied, yielding a novel <code>Layer</code> object, or added, yielding a <a href="/v0.9.2/API/types#AlgebraOfGraphics.Layers"><code>AlgebraOfGraphics.Layers</code></a> object.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",k,[a("summary",null,[s[9]||(s[9]=a("a",{id:"AlgebraOfGraphics.Layers",href:"#AlgebraOfGraphics.Layers"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.Layers")],-1)),s[10]||(s[10]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Layer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Algebraic object encoding a list of <a href="/v0.9.2/API/types#AlgebraOfGraphics.Layer"><code>AlgebraOfGraphics.Layer</code></a> objects. <code>Layers</code> objects can be added or multiplied, yielding a novel <code>Layers</code> object.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",y,[a("summary",null,[s[12]||(s[12]=a("a",{id:"AlgebraOfGraphics.zerolayer",href:"#AlgebraOfGraphics.zerolayer"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.zerolayer")],-1)),s[13]||(s[13]=e()),l(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[14]||(s[14]=t(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">zerolayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Returns a <code>Layers</code> with an empty layer list which can act as a zero in the layer algebra.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>layer * zerolayer() ~ zerolayer()</span></span>
<span class="line"><span>layer + zerolayer() ~ layer</span></span></code></pre></div><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>`,4))]),a("details",b,[a("summary",null,[s[15]||(s[15]=a("a",{id:"AlgebraOfGraphics.ProcessedLayer",href:"#AlgebraOfGraphics.ProcessedLayer"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.ProcessedLayer")],-1)),s[16]||(s[16]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[17]||(s[17]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProcessedLayer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Process a <code>Layer</code> and return the resulting <code>ProcessedLayer</code>.</p><p>Note that this method should not be used anymore as processing a <code>Layer</code> can now potentially return multiple <code>ProcessedLayer</code> objects. Therefore, you should use the plural form <code>ProcessedLayers(layer)</code>.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',4))]),a("details",u,[a("summary",null,[s[18]||(s[18]=a("a",{id:"AlgebraOfGraphics.ProcessedLayers",href:"#AlgebraOfGraphics.ProcessedLayers"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.ProcessedLayers")],-1)),s[19]||(s[19]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[20]||(s[20]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ProcessedLayers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(layers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{ProcessedLayer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Object encoding a list of <a href="/v0.9.2/API/types#AlgebraOfGraphics.ProcessedLayer"><code>AlgebraOfGraphics.ProcessedLayer</code></a> objects. <code>ProcessedLayers</code> objects are the output of the processing pipeline and can be drawn without further processing.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",A,[a("summary",null,[s[21]||(s[21]=a("a",{id:"AlgebraOfGraphics.Entry",href:"#AlgebraOfGraphics.Entry"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.Entry")],-1)),s[22]||(s[22]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plottype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PlotType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, positional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, named</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedArguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Define plottype as well as positional and named arguments for a single plot.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))]),a("details",f,[a("summary",null,[s[24]||(s[24]=a("a",{id:"AlgebraOfGraphics.AxisEntries",href:"#AlgebraOfGraphics.AxisEntries"},[a("span",{class:"jlbinding"},"AlgebraOfGraphics.AxisEntries")],-1)),s[25]||(s[25]=e()),l(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[26]||(s[26]=t('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AxisEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Axis, Nothing}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, entries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Entry}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, categoricalscales, continuousscales)</span></span></code></pre></div><p>Define all ingredients to make plots on an axis. Each categorical scale should be a <code>CategoricalScale</code>, and each continuous scale should be a <code>ContinuousScale</code>.</p><p><a href="https://github.com/MakieOrg/AlgebraOfGraphics.jl" target="_blank" rel="noreferrer">source</a></p>',3))])])}const F=r(d,[["render",E]]);export{v as __pageData,F as default};
